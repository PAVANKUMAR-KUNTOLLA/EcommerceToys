{"version":3,"sources":["webpack:///./src/views/Auth/RegisterView.js","webpack:///./src/components/CustomAlert.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","palette","background","dark","height","paddingBottom","spacing","paddingTop","alert","_defineProperty","position","right","top","breakpoints","down","maxWidth","logo","width","menuPaper","maxHeight","RegisterView","classes","_useState2","_slicedToArray","useState","isAlert","alertTitle","alertText","severity","showAlert","setShowAlert","React","createElement","Page","className","title","CustomAlert","open","onClose","Box","display","flexDirection","justifyContent","PerfectScrollbar","Container","alignItems","marginBottom","Formik","initialValues","name","email","password","passwordConfirmation","validationSchema","Yup","shape","max","required","matches","when","is","val","length","then","oneOf","onSubmit","values","_ref","setSubmitting","resetForm","url","Api","signup","config","headers","Cookies","get","axios","post","res","status","error","response","data","_ref2","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","autoComplete","mb","Typography","color","variant","TextField","Boolean","fullWidth","helperText","label","margin","onBlur","onChange","value","type","my","Button","disabled","size","Link","component","RouterLink","to","marginTop","boxShadow","alertContainer","minWidth","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","AlertTitle","prototype","PropTypes","bool","string","func"],"mappings":"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","file":"RegisterView.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography,\n} from \"@mui/material\";\n\nimport { makeStyles } from \"@mui/styles\";\n\nimport CustomAlert from \"../../components/CustomAlert\";\n\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport Api from \"../../components/Api\";\nimport Page from \"../../components/Page\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: \"100%\",\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n  alert: {\n    position: \"absolute\",\n    right: 50,\n    top: 50,\n    [theme.breakpoints.down(\"sm\")]: {\n      right: 20,\n      maxWidth: 250,\n    },\n  },\n  logo: {\n    width: 100,\n  },\n  menuPaper: {\n    maxHeight: 200,\n  },\n}));\n\nconst RegisterView = () => {\n  const classes = useStyles();\n  const [showAlert, setShowAlert] = useState({\n    isAlert: false,\n    alertTitle: \"\",\n    alertText: \"\",\n    severity: \"\",\n  });\n\n  return (\n    <Page className={classes.root} title=\"Register\">\n      {showAlert.isAlert ? (\n        <CustomAlert\n          open={showAlert.isAlert}\n          severity={showAlert.severity}\n          alertTitle={showAlert.alertTitle}\n          alertText={showAlert.alertText}\n          onClose={() =>\n            setShowAlert({\n              isAlert: false,\n              alertTitle: \"\",\n              alertText: \"\",\n              severity: \"\",\n            })\n          }\n        />\n      ) : null}\n\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <PerfectScrollbar>\n          <Container maxWidth=\"sm\">\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              marginBottom={2}\n            >\n              {/* We can place our logo here */}\n            </Box>\n            <Formik\n              initialValues={{\n                name: \"\",\n                email: \"\",\n                password: \"\",\n                passwordConfirmation: \"\",\n              }}\n              validationSchema={Yup.object().shape({\n                name: Yup.string().max(255).required(\"name is required\"),\n                email: Yup.string()\n                  .email(\"Must be a valid email\")\n                  .max(255)\n                  .required(\"Email is required\"),\n\n                password: Yup.string()\n                  .required(\"Please enter your password\")\n                  .matches(\n                    /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\n                    \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\n                  ),\n                passwordConfirmation: Yup.string().when(\"password\", {\n                  is: (val) => (val && val.length > 0 ? true : false),\n                  then: Yup.string().oneOf(\n                    [Yup.ref(\"password\")],\n                    \"Both password need to be the same\"\n                  ),\n                }),\n              })}\n              onSubmit={(values, { setSubmitting, resetForm }) => {\n                const url = Api.signup;\n\n                const config = {\n                  headers: {\n                    \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n                  },\n                };\n\n                axios\n                  .post(url, values, config)\n                  .then((res) => {\n                    if (res.status === 200) {\n                      setShowAlert({\n                        isAlert: true,\n                        alertText: \"Your are successfully registered.\",\n                        severity: \"success\",\n                      });\n                      setSubmitting(false);\n                      resetForm();\n                    }\n                  })\n                  .catch((error) => {\n                    if (error.response) {\n                      const { data } = error.response;\n                      setShowAlert({\n                        isAlert: true,\n                        alertText: data?.[\"message\"],\n                        severity: \"error\",\n                        alertTitle: \"Error\",\n                      });\n                      // resetForm();\n                      setSubmitting(false);\n                    }\n                  });\n              }}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                touched,\n                values,\n              }) => (\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\n                  <Box mb={3}>\n                    <Typography color=\"textPrimary\" variant=\"h2\">\n                      Register\n                    </Typography>\n                  </Box>\n\n                  <TextField\n                    error={Boolean(touched.name && errors.name)}\n                    fullWidth\n                    helperText={touched.name && errors.name}\n                    label=\"Name\"\n                    margin=\"normal\"\n                    name=\"name\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.name}\n                    variant=\"outlined\"\n                  />\n\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email Address\"\n                    margin=\"normal\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n\n                  <TextField\n                    error={Boolean(touched.password && errors.password)}\n                    fullWidth\n                    helperText={touched.password && errors.password}\n                    label=\"Password\"\n                    margin=\"normal\"\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.password}\n                    variant=\"outlined\"\n                  />\n                  <TextField\n                    error={Boolean(\n                      touched.passwordConfirmation &&\n                        errors.passwordConfirmation\n                    )}\n                    fullWidth\n                    helperText={\n                      touched.passwordConfirmation &&\n                      errors.passwordConfirmation\n                    }\n                    label=\"Confirm Password\"\n                    margin=\"normal\"\n                    name=\"passwordConfirmation\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.passwordConfirmation}\n                    variant=\"outlined\"\n                  />\n\n                  <Box my={2}>\n                    <Button\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      fullWidth\n                      size=\"large\"\n                      type=\"submit\"\n                      variant=\"contained\"\n                    >\n                      Sign up\n                    </Button>\n                  </Box>\n                  <Typography color=\"textSecondary\" variant=\"body1\">\n                    Have an account?{\" \"}\n                    <Link component={RouterLink} to=\"/login\" variant=\"h6\">\n                      Sign in\n                    </Link>\n                  </Typography>\n                </form>\n              )}\n            </Formik>\n          </Container>\n        </PerfectScrollbar>\n      </Box>\n    </Page>\n  );\n};\n\nexport default RegisterView;\n","import React from \"react\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Snackbar } from \"@mui/material\";\nimport { Alert, AlertTitle } from \"@mui/material\";\n\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(10),\n    boxShadow: \"-2px 5px 15px -2px rgba(0,0,0,0.71)\",\n  },\n  alertContainer: {\n    minWidth: 350,\n  },\n}));\n\nconst CustomAlert = ({ open, severity, alertTitle, alertText, onClose }) => {\n  let vertical = \"top\",\n    horizontal = \"right\";\n\n  const classes = useStyles();\n\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical, horizontal }}\n      open={open}\n      autoHideDuration={6000}\n      onClose={onClose}\n      className={classes.root}\n    >\n      <Alert\n        severity={severity}\n        onClose={onClose}\n        className={classes.alertContainer}\n      >\n        {alertTitle ? <AlertTitle>{alertTitle}</AlertTitle> : null}\n        {alertText}!\n      </Alert>\n    </Snackbar>\n  );\n};\n\nCustomAlert.prototype = {\n  open: PropTypes.bool,\n  severity: PropTypes.string, //['success','warning', 'error']\n  alertText: PropTypes.string,\n  alertTitle: PropTypes.string,\n  onClose: PropTypes.func,\n};\n\nexport default CustomAlert;\n"],"sourceRoot":""}