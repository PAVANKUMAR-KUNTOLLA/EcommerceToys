{"version":3,"sources":["webpack:///./src/utils/index.js","webpack:///./src/views/Checkout/Address.js","webpack:///./src/views/Checkout/PlaceOrder.js","webpack:///./src/views/Checkout/Payment.js","webpack:///./src/views/Checkout/ShippingPage.js","webpack:///./src/views/Checkout/checkout.page.js","webpack:///./src/components/Page.js"],"names":["thousands_separators","num","num_parts","toString","split","replace","join","AddressStep","_ref","addressData","setAddressData","handleChange","e","_e$target","target","name","value","prevAddressData","_objectSpread","_defineProperty","React","createElement","Box","sx","display","flexDirection","gap","marginTop","maxWidth","xs","sm","justifyContent","marginLeft","marginRight","TextField","id","label","variant","required","address","onChange","city","pincode","country","customPlaceOrderStyles","makeStyles","theme","MainBlock","breakpoints","down","rightBlock","up","marginBottom","title","fontSize","fontWeight","lineHeight","paragraph","PlaceOrderStep","paymentMethod","_useState2","_slicedToArray","useState","showAlert","setShowAlert","customStyles","cart","useSelector","state","products","dispatch","useDispatch","navigate","useNavigate","handleNav","isLoadingSpin","path","concat","useEffect","setLoadingSpin","privateApiGET","Api","then","response","status","data","console","log","setProducts","error","className","Fragment","width","Typography","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","border","quantity","price","Container","borderRadius","boxShadow","backgroundColor","borderTop","padding","reduce","acc","item","toFixed","Button","onClick","payload","arrayOfArrayIds","privateApiPOST","place_order","setTimeout","Alert","severity","position","top","left","transform","AlertTitle","customPaymentStyles","FormBox","RadioGroup","PaymentStep","paymentData","setPaymentData","prevPaymentData","FormControlLabel","control","Radio","cardNumber","cardHolder","expiryDate","cvv","upiId","steps","OrderPayment","activeStep","setActiveStep","_useState4","_useState6","Stepper","index","labelProps","Step","_extends","StepLabel","height","step","renderStepContent","pt","color","disabled","prevActiveStep","mr","length","flex","every","field","trim","alert","CheckOutPage","Page","forwardRef","ref","children","_ref$title","rest","_objectWithoutProperties","_excluded","Helmet","propTypes","PropTypes","node","isRequired","string"],"mappings":"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","file":"checkout.page.js","sourcesContent":["// Convert number to thousand separated string\n// eg: 100000 -> 100,000\nexport function thousands_separators(num) {\n    if (num) {\n      var num_parts = num.toString().split(\".\");\n      num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      return num_parts.join(\".\");\n    }\n    return num;\n  }\n\nexport function formattedPrice(price) {\n    return price.toLocaleString('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    });\n  }\n  ","import React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\n\nconst AddressStep = ({ addressData, setAddressData }) => {\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setAddressData((prevAddressData) => ({\n      ...prevAddressData,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <form>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"16px\",\n          marginTop: \"50px\",\n          maxWidth: { xs: \"80%\", sm: \"50%\" },\n          justifyContent: \"space-between\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      >\n        <TextField\n          id=\"address\"\n          name=\"address\"\n          label=\"Address\"\n          variant=\"outlined\"\n          required\n          value={addressData.address}\n          onChange={handleChange}\n        />\n        <TextField\n          id=\"city\"\n          name=\"city\"\n          label=\"City\"\n          variant=\"outlined\"\n          required\n          value={addressData.city}\n          onChange={handleChange}\n        />\n        <TextField\n          id=\"pincode\"\n          name=\"pincode\"\n          label=\"Pincode\"\n          variant=\"outlined\"\n          required\n          value={addressData.pincode}\n          onChange={handleChange}\n        />\n        <TextField\n          id=\"country\"\n          name=\"country\"\n          label=\"Country\"\n          variant=\"outlined\"\n          required\n          value={addressData.country}\n          onChange={handleChange}\n        />\n      </Box>\n    </form>\n  );\n};\n\nexport default AddressStep;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Container } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useNavigate } from \"react-router-dom\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport Alert from \"@mui/material/Alert\";\nimport AlertTitle from \"@mui/material/AlertTitle\";\nimport { thousands_separators } from \"../../utils\";\n\nimport { privateApiPOST, privateApiGET } from \"../../components/PrivateRoute\";\nimport Api from \"../../components/Api\";\nimport { setProducts, setLoadingSpin } from \"../../redux/products/produtsSlice\";\n\nconst customPlaceOrderStyles = makeStyles((theme) => ({\n  MainBlock: {\n    display: \"flex\",\n    marginTop: \"50px\",\n    flexDirection: \"row\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  rightBlock: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    marginTop: \"16px\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginTop: \"0px\",\n      marginBottom: \"auto\",\n    },\n  },\n  title: {\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    lineHeight: \"21px\",\n    marginBottom: \"5px\",\n  },\n  paragraph: {\n    fontSize: \"16px\",\n    fontWeight: \"400\",\n    lineHeight: \"19px\",\n  },\n}));\n\nconst PlaceOrderStep = ({ address, paymentMethod }) => {\n  const [showAlert, setShowAlert] = useState(false); // State for managing alert visibility\n\n  const customStyles = customPlaceOrderStyles();\n  const cart = useSelector((state) => state.products.cart);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const isLoadingSpin = useSelector((state) => state.products.isLoadingSpin);\n\n  const handleEditPlaceOrder = (data) => {\n    let payload = data;\n    privateApiPOST(Api.place_order, payload)\n      .then((response) => {\n        const { status, data } = response;\n        if (status === 200) {\n          console.log(\"data\", data);\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error\", error);\n      });\n  };\n\n  const handleNav = (value) => {\n    let path = `/app/${value}`;\n    navigate(path);\n  };\n\n  const handleFetchProducts = () => {\n    dispatch(setLoadingSpin(true));\n    privateApiGET(Api.products)\n      .then((response) => {\n        const { status, data } = response;\n        if (status === 200) {\n          console.log(\"data\", data);\n          dispatch(setProducts(data?.data));\n          dispatch(setLoadingSpin(false));\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error\", error);\n        dispatch(setLoadingSpin(false));\n      });\n  };\n\n  const handlePlaceOrder = () => {\n    // Display the success alert\n    const arrayOfArrayIds = cart.map((item) => {\n      return { id: item.id };\n    });\n\n    console.log(arrayOfArrayIds);\n    console.log(\"cart inside\", cart);\n    handleEditPlaceOrder(arrayOfArrayIds);\n\n    setShowAlert(true);\n\n    // Navigate to home page after 5 seconds\n    setTimeout(() => {\n      setShowAlert(false);\n      handleNav(\"home\");\n    }, 3000);\n  };\n\n  useEffect(() => {\n    handleFetchProducts();\n  }, []);\n\n  return (\n    <Box maxWidth=\"lg\" className={customStyles.MainBlock}>\n      {!showAlert && ( // Conditionally render the content when showAlert is false\n        <>\n          <Box\n            maxWidth=\"sm\"\n            sx={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: \"16px\",\n              width: { xs: \"100%\", sm: \"60%\" },\n              maxWidth: \"100%\",\n              marginLeft: { xs: \"0\", sm: \"10px\" },\n            }}\n          >\n            <Box>\n              <Typography className={customStyles.title}>\n                Shipping Address:\n              </Typography>\n              {/* Display the address data */}\n              <Typography className={customStyles.paragraph}>\n                {address.address}, {address.city}, {address.pincode},{\" \"}\n                {address.country}\n              </Typography>\n              <hr></hr>\n            </Box>\n            <Box>\n              <Typography className={customStyles.title}>\n                Payment Details:\n              </Typography>\n              {/* Display the payment details data */}\n              <Typography className={customStyles.paragraph}>\n                {paymentMethod === \"card\"\n                  ? \"Credit/Debit Card\"\n                  : paymentMethod === \"upi\"\n                  ? \"UPI\"\n                  : \"\"}\n              </Typography>\n              <hr></hr>\n            </Box>\n            <Box>\n              <Typography className={customStyles.title}>\n                Cart Items:\n              </Typography>\n              {/* Display the cart items data */}\n              <TableContainer component={Paper} sx={{ marginTop: \"20px\" }}>\n                <Table sx={{ maxWidth: 550 }} aria-label=\"simple table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell align=\"left\" className={customStyles.title}>\n                        Title\n                      </TableCell>\n                      <TableCell align=\"left\" className={customStyles.title}>\n                        Quantity\n                      </TableCell>\n                      <TableCell align=\"left\" className={customStyles.title}>\n                        Amount\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {cart.map((row) => (\n                      <TableRow\n                        key={row.id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                      >\n                        <TableCell\n                          align=\"left\"\n                          className={customStyles.paragraph}\n                        >\n                          {row.title}\n                        </TableCell>\n                        <TableCell\n                          align=\"left\"\n                          className={customStyles.paragraph}\n                        >\n                          {row.quantity}\n                        </TableCell>\n                        <TableCell\n                          align=\"left\"\n                          className={customStyles.paragraph}\n                        >\n                          {row.quantity * row.price}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n\n              <hr></hr>\n            </Box>\n          </Box>\n          <Box sx={{ marginLeft: { xs: \"0\", sm: \"30px\" } }}>\n            <Container\n              maxWidth=\"sm\"\n              className={customStyles.rightBlock}\n              sx={{\n                borderRadius: \"4px\",\n                boxShadow: \"0 1px 6px rgba(0,0,0, 0.095389)\",\n                backgroundColor: \"rgba(255,255,255, 1)\",\n                borderTop: \"1px solid #E5E5E5\",\n                padding: \"30px\",\n              }}\n            >\n              <Box\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginBottom: \"16px\",\n                }}\n              >\n                <Typography\n                  sx={{\n                    fontSize: \"24px\",\n                    fontWeight: \"600\",\n                    lineHeight: \"27px\",\n                  }}\n                >\n                  Total\n                </Typography>\n                <Typography\n                  sx={{\n                    fontSize: \"21px\",\n                    fontWeight: \"500\",\n                    lineHeight: \"27px\",\n                  }}\n                >\n                  Rs.{\" \"}\n                  {thousands_separators(\n                    cart\n                      .reduce(\n                        (acc, item) => acc + item.quantity * item.price,\n                        0\n                      )\n                      .toFixed(2)\n                  )}\n                </Typography>\n              </Box>\n              <Typography marginBottom=\"16px\">\n                Tax included and shipping charges at checkout\n              </Typography>\n              <Typography marginBottom=\"16px\">\n                Orders will be processed in INR.\n              </Typography>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginTop: { xs: \"12px\" },\n                }}\n              >\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => handleNav(\"products\")}\n                >\n                  shop more\n                </Button>\n                <Button variant=\"contained\" onClick={handlePlaceOrder}>\n                  Place Order\n                </Button>\n              </Box>\n            </Container>\n          </Box>\n        </>\n      )}\n\n      {/* Display the success alert in the center of the screen */}\n      {showAlert && (\n        <Alert\n          severity=\"success\"\n          sx={{\n            position: \"fixed\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n          }}\n        >\n          <AlertTitle>Sucessfull</AlertTitle>\n          You're order placed sucessfully —{\" \"}\n          <strong> Please check it out!</strong>\n        </Alert>\n      )}\n    </Box>\n  );\n};\n\nexport default PlaceOrderStep;\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst customPaymentStyles = makeStyles((theme) => ({\n  FormBox: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"16px\",\n    marginTop: \"50px\",\n    maxWidth: \"50%\",\n    justifyContent: \"space-between\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    [theme.breakpoints.down(\"md\")]: {\n      maxWidth: \"80%\",\n    },\n  },\n  RadioGroup: {\n    flexDirection: \"row\",\n  },\n}));\n\nconst PaymentStep = ({ paymentData, setPaymentData }) => {\n  const customStyles = customPaymentStyles();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setPaymentData((prevPaymentData) => ({\n      ...prevPaymentData,\n      [name]: value,\n    }));\n  };\n\n  const isPaymentMethodSelected = () => {\n    return paymentData.paymentMethod !== \"\";\n  };\n\n  const isCardPaymentValid = () => {\n    return (\n      paymentData.cardNumber.trim() !== \"\" &&\n      paymentData.cardHolder.trim() !== \"\" &&\n      paymentData.expiryDate.trim() !== \"\" &&\n      paymentData.cvv.trim() !== \"\"\n    );\n  };\n\n  const isUpiPaymentValid = () => {\n    return paymentData.upiId.trim() !== \"\";\n  };\n\n  const isPaymentValid = () => {\n    if (paymentData.paymentMethod === \"card\") {\n      return isCardPaymentValid();\n    } else if (paymentData.paymentMethod === \"upi\") {\n      return isUpiPaymentValid();\n    }\n\n    // Add more validation for other payment methods if needed\n\n    return false;\n  };\n\n  return (\n    <form>\n      <Box className={customStyles.FormBox}>\n        <RadioGroup\n          name=\"paymentMethod\"\n          value={paymentData.paymentMethod}\n          onChange={handleChange}\n          className={customStyles.RadioGroup}\n        >\n          <FormControlLabel\n            value=\"card\"\n            control={<Radio />}\n            label=\"Credit/Debit Card\"\n          />\n          <FormControlLabel value=\"upi\" control={<Radio />} label=\"UPI\" />\n          {/* Add more payment options here */}\n        </RadioGroup>\n\n        {paymentData.paymentMethod === \"card\" && (\n          <>\n            <TextField\n              id=\"cardNumber\"\n              name=\"cardNumber\"\n              label=\"Card Number\"\n              variant=\"outlined\"\n              value={paymentData.cardNumber}\n              onChange={handleChange}\n              required\n              // error={!isCardPaymentValid() && isPaymentMethodSelected()}\n              // helperText={\n              //   !isCardPaymentValid() && isPaymentMethodSelected()\n              //     ? \"Please fill in all the card details.\"\n              //     : \"\"\n              // }\n            />\n            <TextField\n              id=\"cardHolder\"\n              name=\"cardHolder\"\n              label=\"Card Holder\"\n              variant=\"outlined\"\n              value={paymentData.cardHolder}\n              onChange={handleChange}\n              required\n              // error={!isCardPaymentValid() && isPaymentMethodSelected()}\n              // helperText={\n              //   !isCardPaymentValid() && isPaymentMethodSelected()\n              //     ? \"Please fill in all the card details.\"\n              //     : \"\"\n              // }\n            />\n            <TextField\n              id=\"expiryDate\"\n              name=\"expiryDate\"\n              label=\"Expiry Date\"\n              variant=\"outlined\"\n              value={paymentData.expiryDate}\n              onChange={handleChange}\n              required\n              // error={!isCardPaymentValid() && isPaymentMethodSelected()}\n              // helperText={\n              //   !isCardPaymentValid() && isPaymentMethodSelected()\n              //     ? \"Please fill in all the card details.\"\n              //     : \"\"\n              // }\n            />\n            <TextField\n              id=\"cvv\"\n              name=\"cvv\"\n              label=\"CVV\"\n              variant=\"outlined\"\n              value={paymentData.cvv}\n              onChange={handleChange}\n              required\n              // error={!isCardPaymentValid() && isPaymentMethodSelected()}\n              // helperText={\n              //   !isCardPaymentValid() && isPaymentMethodSelected()\n              //     ? \"Please fill in all the card details.\"\n              //     : \"\"\n              // }\n            />\n          </>\n        )}\n\n        {paymentData.paymentMethod === \"upi\" && (\n          <TextField\n            id=\"upiId\"\n            name=\"upiId\"\n            label=\"UPI ID\"\n            variant=\"outlined\"\n            value={paymentData.upiId}\n            onChange={handleChange}\n            required\n            // error={!isUpiPaymentValid() && isPaymentMethodSelected()}\n            // helperText={\n            //   !isUpiPaymentValid() && isPaymentMethodSelected()\n            //     ? \"Please fill in the UPI ID.\"\n            //     : \"\"\n            // }\n          />\n        )}\n      </Box>\n    </form>\n  );\n};\n\nexport default PaymentStep;\n","import React, { useState, useRef } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport AddressStep from \"./Address\"; // Make sure you import the correct component\nimport PlaceOrderStep from \"./PlaceOrder\";\nimport PaymentStep from \"./Payment\"; // Make sure you import the correct component\nimport { Visibility } from \"@mui/icons-material\";\n\nconst steps = [\"Address\", \"Payment\", \"Place Order\"];\n\nexport default function OrderPayment() {\n  const [activeStep, setActiveStep] = useState(0);\n\n  const [addressData, setAddressData] = useState({\n    address: \"\",\n    city: \"\",\n    pincode: \"\",\n    country: \"\",\n  });\n\n  const [paymentData, setPaymentData] = useState({\n    paymentMethod: \"\",\n    cardNumber: \"\",\n    cardHolder: \"\",\n    expiryDate: \"\",\n    cvv: \"\",\n    upiId: \"\",\n  });\n\n  const handleNext = () => {\n    // Move to the next step if the current step is valid\n    if (activeStep === 0) {\n      // AddressStep validation logic\n      const addressFields = [\"address\", \"city\", \"pincode\", \"country\"];\n      const isAddressStepValid = addressFields.every(\n        (field) => addressData[field].trim() !== \"\"\n      );\n\n      if (!isAddressStepValid) {\n        // If the AddressStep is not valid, show a message\n        alert(\"Please fill in all the required address fields.\");\n        return;\n      }\n    } else if (activeStep === 1) {\n      // PaymentStep validation logic\n      if (paymentData.paymentMethod === \"\") {\n        // If the PaymentStep is not valid, show a message\n        alert(\"Please select a payment method.\");\n        return;\n      }\n\n      // You can add more validation logic here for specific payment methods if needed.\n      if (paymentData.paymentMethod === \"card\") {\n        if (\n          paymentData.cardNumber.trim() === \"\" ||\n          paymentData.cardHolder.trim() === \"\" ||\n          paymentData.expiryDate.trim() === \"\" ||\n          paymentData.cvv.trim() === \"\"\n        ) {\n          // If the Card Payment is not valid, show a message\n          alert(\"Please fill in all the required card details.\");\n          return;\n        }\n      } else if (paymentData.paymentMethod === \"upi\") {\n        if (paymentData.upiId.trim() === \"\") {\n          // If the UPI Payment is not valid, show a message\n          alert(\"Please fill in the UPI ID.\");\n          return;\n        }\n      }\n\n      // If the PaymentStep is valid, proceed to the next step\n    }\n\n    // If the current step is valid, move to the next step\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setAddressData({\n      address: \"\",\n      city: \"\",\n      pincode: \"\",\n      country: \"\",\n    });\n    setPaymentData({\n      paymentMethod: \"\",\n      cardNumber: \"\",\n      cardHolder: \"\",\n      expiryDate: \"\",\n      cvv: \"\",\n      upiId: \"\",\n    });\n  };\n\n  const renderStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return (\n          <AddressStep\n            addressData={addressData}\n            setAddressData={setAddressData}\n          />\n        );\n      case 1:\n        return (\n          <PaymentStep\n            paymentData={paymentData}\n            setPaymentData={setPaymentData}\n          />\n        );\n      case 2:\n        return (\n          <PlaceOrderStep\n            address={addressData}\n            paymentMethod={paymentData.paymentMethod}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Box sx={{ width: \"100%\", marginTop: \"50px\" }}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      {/* Render the component based on the active step */}\n      <Box sx={{ height: activeStep === 2 ? \"450px\" : \"350px\" }}>\n        {renderStepContent(activeStep)}\n      </Box>\n\n      <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n        <Button\n          color=\"inherit\"\n          disabled={activeStep === 0}\n          onClick={handleBack}\n          sx={{ mr: 1 }}\n        >\n          {activeStep === steps.length - 1 ? \"\" : \"Back\"}\n        </Button>\n        <Box sx={{ flex: \"1 1 auto\" }} />\n\n        <Button onClick={handleNext}>\n          {activeStep === steps.length - 1 ? \" \" : \"Next\"}\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","import React, { Component } from \"react\";\nimport OrderPayment from \"./ShippingPage\";\nimport { Container } from \"@mui/material\";\nimport Page from \"../../components/Page\";\n\nconst CheckOutPage = () => {\n  return (\n    <Page title=\"checkout\">\n      <Container maxWidth=\"md\">\n        <OrderPayment />\n      </Container>\n    </Page>\n  );\n};\n\nexport default CheckOutPage;\n","import React, { forwardRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n  return (\n    <div ref={ref} {...rest}>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {children}\n    </div>\n  );\n});\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n};\n\nexport default Page;\n"],"sourceRoot":""}